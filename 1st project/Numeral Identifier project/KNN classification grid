import pygame
import numpy as np
import os

# Initialize pygame
pygame.init()

# Grid and screen dimensions
rows, cols = 9, 7
cell_size = 50
margin = 2
width = cols * cell_size + (cols + 1) * margin + 300
height = rows * cell_size + (rows + 1) * margin + 200

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
LIGHT_BLUE = (173, 216, 230)
GREEN = (0, 255, 0)

# Initialize screen
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("KNN Digit Classification")

# Create grid state
grid = np.zeros((rows, cols), dtype=int)

# Load training data
base_dir = os.path.dirname(os.path.abspath(__file__))
matrix_file = os.path.join(base_dir, "matrix_file.txt")
labels_file = os.path.join(base_dir, "matrix_file_labels.txt")

X = np.loadtxt(matrix_file, delimiter=',')
y = np.loadtxt(labels_file, dtype=int)

# Input variables
K = 3  # Default K value
k_input = ""
input_active = False
result = None
mouse_pressed = False
current_mouse_button = None

# Button dimensions
classify_button = pygame.Rect(width - 200, 100, 150, 40)
clear_button = pygame.Rect(width - 200, 150, 150, 40)

def euclidean_distance(v1, v2):
    return np.sqrt(np.sum((v1 - v2) ** 2))

def draw_grid():
    screen.fill(GRAY)
    font = pygame.font.Font(None, 24)

    # Draw grid
    for row in range(rows):
        for col in range(cols):
            color = BLACK if grid[row, col] == 1 else WHITE
            pygame.draw.rect(
                screen,
                color,
                [
                    margin + col * (cell_size + margin),
                    margin + row * (cell_size + margin),
                    cell_size,
                    cell_size,
                ],
            )

    # Draw K input box
    k_text = font.render(f"K: {k_input}", True, BLACK)
    input_box = pygame.Rect(width - 200, 50, 150, 30)
    pygame.draw.rect(screen, WHITE, input_box)
    
    # Draw cursor if input is active
    if input_active:
        cursor_pos = k_text.get_width() + input_box.x + 5
        pygame.draw.line(screen, BLACK, (cursor_pos, input_box.y + 5), (cursor_pos, input_box.y + 25))
    
    screen.blit(k_text, (width - 190, 55))

    # Draw Classify button
    button_color = LIGHT_BLUE if classify_button.collidepoint(pygame.mouse.get_pos()) else BLUE
    pygame.draw.rect(screen, button_color, classify_button)
    classify_text = font.render("Classify", True, WHITE)
    screen.blit(classify_text, (width - 160, 110))

    # Draw Clear button
    clear_color = GREEN if clear_button.collidepoint(pygame.mouse.get_pos()) else (0, 200, 0)
    pygame.draw.rect(screen, clear_color, clear_button)
    clear_text = font.render("Clear", True, WHITE)
    screen.blit(clear_text, (width - 160, 160))

    # Draw result
    if result is not None:
        result_text = font.render(f"Predicted: {result}", True, RED)
        screen.blit(result_text, (width - 200, 200))

def classify_grid():
    global result
    
    # Get current grid as vector
    current_vector = grid.flatten()
    
    # Calculate distances
    distances = [euclidean_distance(current_vector, X[i]) for i in range(len(X))]
    
    # Sort distances and corresponding labels
    sorted_indices = np.argsort(distances)
    sorted_labels = y[sorted_indices]
    
    # KNN classification
    k_labels = sorted_labels[:K]
    unique, counts = np.unique(k_labels, return_counts=True)
    result = unique[np.argmax(counts)]
    
    return result

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            
            # Grid cell coloring with dragging
            col = (pos[0] - margin) // (cell_size + margin)
            row = (pos[1] - margin) // (cell_size + margin)
            if 0 <= row < rows and 0 <= col < cols:
                if event.button == 1:  # Left click
                    grid[row, col] = 1
                    mouse_pressed = True
                    current_mouse_button = 1
                elif event.button == 3:  # Right click
                    grid[row, col] = 0
                    mouse_pressed = True
                    current_mouse_button = 3

            # K input box
            input_box = pygame.Rect(width - 200, 50, 150, 30)
            if input_box.collidepoint(pos):
                input_active = True
            else:
                input_active = False

            # Classify button
            if classify_button.collidepoint(pos):
                if K > 0:
                    classify_grid()

            # Clear button
            if clear_button.collidepoint(pos):
                grid.fill(0)
                result = None

        elif event.type == pygame.MOUSEBUTTONUP:
            mouse_pressed = False
            current_mouse_button = None

        elif event.type == pygame.MOUSEMOTION:
            if mouse_pressed:
                pos = pygame.mouse.get_pos()
                col = (pos[0] - margin) // (cell_size + margin)
                row = (pos[1] - margin) // (cell_size + margin)
                
                if 0 <= row < rows and 0 <= col < cols:
                    if current_mouse_button == 1:  # Left click
                        grid[row, col] = 1
                    elif current_mouse_button == 3:  # Right click
                        grid[row, col] = 0

        elif event.type == pygame.KEYDOWN:
            if input_active:
                if event.key == pygame.K_RETURN:
                    try:
                        K = int(k_input)
                        input_active = False
                    except ValueError:
                        k_input = ""
                elif event.key == pygame.K_BACKSPACE:
                    k_input = k_input[:-1]
                else:
                    k_input += event.unicode

    draw_grid()
    pygame.display.flip()

pygame.quit()